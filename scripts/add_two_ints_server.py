#!/usr/bin/env python
# -*- coding: UTF-8 -*-
from __future__ import print_function

from beginner_tutorials.srv import AddTwoInts,AddTwoIntsResponse
# source devel/setup.bash后Shell环境中$PYTHONPATH为
#/home/haypin/catkin_ws/devel/lib/python2.7/dist-packages:/opt/ros/kinetic/lib/python2.7/dist-packages 
#而/home/haypin/catkin_ws/devel/lib/python2.7/dist-packages中:
'''
haypin@ubt:~/catkin_ws/src/beginner_tutorials/srv$ cat AddTwoInts.srv 
int64 a
int64 b
---
int64 sum
haypin@ubt:~/catkin_ws/src/beginner_tutorials/srv$

haypin@ubt:~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/srv$ ls
_AddTwoInts.py  __init__.py

haypin@ubt:~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/srv$ cat __init__.py
from ._AddTwoInts import *

haypin@ubt:~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/srv$ cat _AddTwoInts.py 
	#用户只定义了描述服务的AddTwoInts.srv文件,_AddTwoInts.py文件自动生成
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beginner_tutorials/AddTwoIntsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy        #genpy模块应该就是能将.msg和.srv文件中定义的消息、服务类型生成python封装类的胶水语言工具
import struct


class AddTwoIntsRequest(genpy.Message):
  #AddTwoInts服务请求封装在AddTwoIntsRequest类中
  _md5sum = "36d09b846be0b371c5f190354dd3153e"
  _type = "beginner_tutorials/AddTwoIntsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 a
int64 b
"""
  __slots__ = ['a','b']
  _slot_types = ['int64','int64']

  def __init__(self, *args, **kwds):

    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       a,b

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.

    if args or kwds:
      super(AddTwoIntsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.a is None:
        self.a = 0
      if self.b is None:
        self.b = 0
    else:
      self.a = 0
      self.b = 0


class AddTwoIntsResponse(genpy.Message):
  #AddTwoInts服务响应封装在AddTwoIntsResponse类中
  _md5sum = "b88405221c77b1878a3cbbfff53428d7"
  _type = "beginner_tutorials/AddTwoIntsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 sum

  __slots__ = ['sum']
  _slot_types = ['int64']

  def __init__(self, *args, **kwds):

    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.

    if args or kwds:
      super(AddTwoIntsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sum is None:
        self.sum = 0
    else:
      self.sum = 0
class AddTwoInts(object):  
  #AddTwoInts服务类型封装在AddTwoInts类中
  #AddTwoInts服务的名字和字段来自于~/catkin_ws/src/beginner_tutorials/srv/AddTwoInts.srv
  _type          = 'beginner_tutorials/AddTwoInts'
  _md5sum = '6a2e34150c00229791cc89ff309fff21'
  _request_class  = AddTwoIntsRequest
  _response_class = AddTwoIntsResponse
'''

import rospy

def handle_add_two_ints(req):
    print("Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b)))
    return AddTwoIntsResponse(req.a + req.b)  #当前服务端根据服务请求req计算出服务响应后，构造AddTwoIntsResponse服务响应的实例返回，客户端将承接该返回

def add_two_ints_server():
    rospy.init_node('add_two_ints_server')
    #声明当前进程节点(向master主节点注册当前进程节点及其消息、服务)
    s = rospy.Service('add_two_ints', AddTwoInts, handle_add_two_ints)
    #声明名为"add_tow_ints"的新服务,其服务类型为AddTwoInts.所有的请求(类型为AddTwoIntsRequest
    #,具有字段a、b,不过在这里不用导入,handle_add_two_ints(req)的req知道具有a、b字段就行了)
    #都传递给handle_add_tow_ints函数.
    print("Ready to add two ints.")
    rospy.spin()
    #像订阅者中的例子一样,rospy.spin()可以防止进程在服务关闭之前退出

if __name__ == "__main__":
    add_two_ints_server()
